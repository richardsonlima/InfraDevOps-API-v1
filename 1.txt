#!/usr/bin/python

import MySQLdb
import simplejson as json
import collections
import requests
import httplib2
import urllib2
import json
import urllib
from urllib import urlencode


main_url = "http://192.168.1.100:5678/myurl"

def get_smaller_dict(bigger_dict):
    new_dict = {}
    new_dict["vm_state"] = bigger_dict["vm_state"]
    new_dict["availability_zone"] = bigger_dict["availability_zone"]
    new_dict["uuid"] = bigger_dict["uuid"]
    new_dict["hostname"] = bigger_dict["hostname"]
    new_dict["key_data"] = bigger_dict["key_data"]
    new_dict["project_id"] = bigger_dict["project_id"]
    new_dict["node"] = bigger_dict["node"]
    new_dict["key_name"] = bigger_dict["key_name"]
    new_dict["host"] = bigger_dict["host"]
    print new_dict
    return new_dict

def main():
    mydb = MySQLdb.connect(host='localhost', user='admin', passwd='admin', db='nova')
    cursor = mydb.cursor()
    cursor.execute("select * from instances")
    columns = [desc[0] for desc in cursor.description]
    rows = cursor.fetchall()
    result = []
    for row in rows:
        row = dict(zip(columns, row))
        result.append(row)

    headers = {}
    http = httplib2.Http()
    headers["Content-Type"] = "application/json"

    print result[0]
    d = {}
    d = get_smaller_dict(result[0])
    print type(d)

    r = requests.post(main_url,data=json.dumps(d),headers=headers)

    if __name__ == "__main__":
    main()

Flask App listening on port 5678

#!/usr/bin/python


from urlparse import urlparse

from flask.ext.uploads import init, save, Upload
from flask import send_from_directory
from flask import Flask, jsonify, render_template, request
from flask import make_response
from flask import Response
from flask import redirect
from flask import url_for
import flask
from werkzeug import secure_filename
import urllib
import requests
import uuid
from werkzeug import SharedDataMiddleware

from collections import defaultdict

from flask import Flask
from flask.ext import restful
from flask.ext.restful.utils import cors

from datetime import timedelta
from flask import current_app
from functools import update_wrapper

from werkzeug.routing import Rule, Map, BaseConverter, ValidationError
from werkzeug.wrappers import Request, Response
from werkzeug.wsgi import responder

import traceback
from commands import *
import os
import pprint
import subprocess
import threading
import commands
import httplib2
import urllib2
import json
import string
import random
from functools import wraps
import logging

import sqlite3
import sys


log_file = "/var/log/rest-engine.log"

logging.basicConfig(filename=log_file,level=logging.DEBUG)

initialized = False
app = Flask(__name__)
app.debug = True

db_path = "/var/www/html/vmstats.db"

def insert_into_dict(db_path, my_dict):
    try:
        db = sqlite3.connect(db_path)
        cursor = db.cursor()

        node = my_dict["node"]
        vm_state = my_dict["vm_state"]
        uuid = my_dict["uuid"]
        availability_zone = my_dict["availability_zone"]
        key_name = my_dict["key_name"]
        hostname = my_dict["hostname"]
        key_data = my_dict["key_data"]
        host = my_dict["host"]
        project_id = my_dict["project_id"]

        cursor.execute("INSERT OR REPLACE INTO vmstats VALUES(?,?,?,?,?,?,?,?,?)", (\
            node,
            vm_state,\
            uuid,\
            availability_zone,\
            key_name,\
            hostname,\
            key_data,\
            host,\
            project_id))
        db.commit()
        db.close()
    except Exception,ex:
        print "\n===============[ ERROR ]==============\n"
        print "\n---Exception---\n"
        print ex
        print "\n---Traceback---\n"
        print traceback.format_exc()

@app.route('/vmdata', methods=['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'])
def hello_world():
    d = {}
    d = json.loads(request.data)
    for key in d.iterkeys():
        logging.debug("key:[{0}]".format(key))
        logging.debug("value:[{0}]".format(d[key]))

    insert_into_dict(db_path,d)
    return "Hello World!"

def main():

    app.debug = True
    app.run(host='192.168.1.100',port=5678)

if __name__ == "__main__":
    main()
